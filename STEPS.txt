

1. Create directory for the module - dino_roar
2. Create info.yml - dino_roar.info.yml
3. Enable the modoule in extends
4. Define the route - create dino_roar.routing.yml
    start with internal name for route (name doesn't matter) - dino_says:
    indent next line 2  spaces (be consistent)
    add path - url for new page
    add defaults with _controller - this is the controller it goes to when someone hits the page (namespaced class and method)
    add requirements with _permission, which allows us to view the page. Don't need quotes, but it is safer to do so.
5. Create the controller
    Create directory src and subdirectory Controller
    Create new PHP class called RoarController.php
    Add namespace. Must start with Drupal, the directory (dino_roar) and then the directory this class lives in (Controller)
    Add a class. Class name must match filename + php
    With the namespace and correct classname, Drupal won't be able to find the class.
    Full class name is Drupal\dino_roar\Controller\RoarController
    Add controller function roar().
    Return via Symfony's Response method. Will autocomplete the use statement. This is required when using a class. Will get page not found without it.
    This shows a response by itself - unthemed. You could return a JSON reponse via an API.
6. Install Drupal Console
    curl -LSs http://drupalconsole.com/installer | php
    mv console.phar /usr/local/bin/drupal
    drupal
    Show all Drupal Console commands: drupal list
    Clear routing cache: drupal router:rebuild
7. Add routing wildcards
    Path can take wildcards - {wildcard}
    Example - path: /the/dino/says/{count}
    Value for {count} in URL is passed to $count in Controller. Must have the same name.
    After a changing to the route, rebuild the routing cache: drupal router:rebuild
    Adding the wildcard will mean that you need to add something after /the/dino/says/ or you'll get a page not found.
8. Debugging
    Copy example settings file
        sudo cp sites/example.settings.local.php sites/default/settings.local.php
        sudo chmod 755 sites/default/settings.local.php
        sudo chmod 755 sites/default/settings.php
        sudo chmod 755 sites/default
    Uncomment the following from settings.php
        # if (file_exists(__DIR__ . '/settings.local.php')) {
        #   include __DIR__ . '/settings.local.php';
        # }
    Rebuild cache
        drupal cache:rebuild
9. Web profiler
    Install Devel module
        Enable Update Manager
        Go to Update Manager Config -> List (admin/reports/updates)
        Install new module or theme
        Copy Link Address from tar.gz on Devel project page
        Paste link
        Click install
        Click "Enable newly added modules"
        When you land back on the module page, enable Webprofiler (devel will also enable)
        Go to Webprofile config and enable Routing, Services and Events
10. Move count out of Controller into its own Service class (that is independent of Drupal)
    Create a directory called Jurassic
    Create a class called RoadGenerator
    Create a namespace for the directory it is in
11. Register the service
    Add RoarGenerator to the container
    Drupal will instantiate the RoadGenentor for us
    create dino_roar_services.yml
    add service
    drupal cache:rebuild
12. extends ControllerBase
    Allows us to get services out of the container
    Example of dependency injection pattern





Notes
    Indentation, curly-braces uses PSR-4 coding standards, which is different to offical Drupal standards
    Service - object that does work for me
    Service Contrainer - Depedency Injection Container
    Container doesn't instantiate a service until someone asks for it (doesn't use CPU or memory until needed)
    Containers reuses objects